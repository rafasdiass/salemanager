import { Component, OnInit, signal, inject } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import {
  IonContent,
  IonHeader,
  IonTitle,
  IonToolbar,
  IonIcon,
  IonSpinner, IonGrid, IonRow, IonCol } from '@ionic/angular/standalone';

import { AdminNotificacao } from 'src/app/shared/models/notificacao.model';
import { AdminNotificationsService } from 'src/app/shared/services/admin-notifications.service';
import { NotificationsHistoryPage } from './notifications-history/notifications-history.page';
import { NotificationsCreateFormPage } from './notifications-create-form/notifications-create-form.page';

@Component({
  selector: 'app-notifications-admin',
  templateUrl: './notifications-admin.page.html',
  styleUrls: ['./notifications-admin.page.scss'],
  standalone: true,
  imports: [
    IonIcon,
    IonSpinner,
    CommonModule,
    FormsModule,
    IonContent,
    IonHeader,
    IonTitle,
    IonToolbar,
    NotificationsHistoryPage,
    NotificationsCreateFormPage,
  ],
})
export class NotificationsAdminPage implements OnInit {
  public readonly notifications = signal<ReadonlyArray<AdminNotificacao>>([]);
  public readonly isLoading = signal<boolean>(true);
  private readonly notificationsService = inject(AdminNotificationsService);

  constructor() {}

  /**
   * Carrega as notifica√ß√µes quando a p√°gina √© iniciada.
   */
  async ngOnInit(): Promise<void> {
    await this.loadNotifications();
  }

  /**
   * Obt√©m todas as notifica√ß√µes do backend.
   */
  private async loadNotifications(): Promise<void> {
    this.isLoading.set(true);
    try {
      console.log('[NotificationsAdminPage] üîÑ Carregando notifica√ß√µes...');
      await this.notificationsService.loadNotifications();

      // Atualiza o signal com o conte√∫do do sinal centralizado
      this.notifications.set([...this.notificationsService.notifications()]);
      console.log(
        '[NotificationsAdminPage] ‚úÖ Notifica√ß√µes carregadas:',
        this.notifications(),
      );
    } catch (error) {
      console.error(
        '[NotificationsAdminPage] ‚ùå Erro ao carregar notifica√ß√µes:',
        error,
      );
    } finally {
      this.isLoading.set(false);
    }
  }

  /**
   * Reenvia uma notifica√ß√£o espec√≠fica.
   */
  async resendNotification(id: string): Promise<void> {
    try {
      console.log(
        `[NotificationsAdminPage] üîÑ Reenviando notifica√ß√£o ${id}...`,
      );
      await this.notificationsService.resendNotification(id);
      await this.loadNotifications();
      console.log(`[NotificationsAdminPage] ‚úÖ Notifica√ß√£o ${id} reenviada.`);
    } catch (error) {
      console.error(
        `[NotificationsAdminPage] ‚ùå Erro ao reenviar notifica√ß√£o ${id}:`,
        error,
      );
    }
  }

  /**
   * Exclui uma notifica√ß√£o.
   */
  async deleteNotification(id: string): Promise<void> {
    try {
      console.log(`[NotificationsAdminPage] üóëÔ∏è Excluindo notifica√ß√£o ${id}...`);
      await this.notificationsService.delete(id);
      await this.loadNotifications();
      console.log(`[NotificationsAdminPage] ‚úÖ Notifica√ß√£o ${id} exclu√≠da.`);
    } catch (error) {
      console.error(
        `[NotificationsAdminPage] ‚ùå Erro ao excluir notifica√ß√£o ${id}:`,
        error,
      );
    }
  }

  /**
   * Trata o evento de cria√ß√£o de nova notifica√ß√£o.
   * Agora, apenas atualiza a lista sem chamar novamente o m√©todo create.
   */
  async onNotificationCreated(
    newNotification: AdminNotificacao,
  ): Promise<void> {
    try {
      console.log(
        `[NotificationsAdminPage] üì© Evento onNotificationCreated recebido.`,
      );
      // Atualiza a lista de notifica√ß√µes sem recriar a notifica√ß√£o
      await this.loadNotifications();
      console.log(
        `[NotificationsAdminPage] ‚úÖ Notifica√ß√µes atualizadas ap√≥s nova cria√ß√£o.`,
      );
    } catch (error) {
      console.error(
        `[NotificationsAdminPage] ‚ùå Erro ao atualizar notifica√ß√µes:`,
        error,
      );
    }
  }
}
